const {Scenes: {BaseScene}, Markup} = require('telegraf')
const buildings = require("../../../model/mockdata/buildings")
const constants = require("../../../model/constants")
const defaultAct = require("../../../DefaultAct")

// const CAMPUS_KEYBOARD_MARKUP = Markup.keyboard([[constants.BUTTON_TEXT_CAMPUS_MAP], [constants.BUTTON_TEXT_CAMPUS_LIST], [constants.BUTTON_TEXT_BACK, constants.BUTTON_TEXT_MAIN_MENU]]).resize(true)
const CAMPUS_KEYBOARD_MARKUP = Markup.keyboard([[constants.BUTTON_TEXT_CAMPUS_MAP], [constants.BUTTON_TEXT_CAMPUS_LIST], [constants.BUTTON_TEXT_MAIN_MENU]]).resize(true)

const CAMPUS_INLINE_KEYBOARD = Markup.inlineKeyboard([
    [Markup.button.callback('–ì–ö', 'btn_mainc'), Markup.button.callback('–ù–¢–ë', 'btn_library')],
    [Markup.button.callback('–ë–∏–∑–Ω–µ—Å-–∏–Ω–∫—É–±–∞—Ç–æ—Ä', 'btn_incubator'), Markup.button.callback('–ú–ö–¶', 'btn_culturec')],
    [Markup.button.callback('–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–æ—Ä–∏–π', 'btn_disp')],
    [Markup.button.callback('–ë–∞—Å—Å–µ–π–Ω', 'btn_pool'), Markup.button.callback('–§–°–¶', 'btn_gym')],
    [Markup.button.callback('–õ—ã–∂–Ω–∞—è –±–∞–∑–∞ "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏–∫"', 'btn_stadium')],
    [Markup.button.callback('–í—ã–±—Ä–∞—Ç—å —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å', 'btn_choice')]
])

const NUM_CAMPUS_KEYBOARD = Markup.inlineKeyboard([
    [Markup.button.callback('‚Ññ1', 'btn_c1'), Markup.button.callback('‚Ññ2', 'btn_c2'), Markup.button.callback('‚Ññ3', 'btn_c3'), Markup.button.callback('‚Ññ4', 'btn_c4'), Markup.button.callback('‚Ññ5', 'btn_c5'), Markup.button.callback('‚Ññ6', 'btn_c6')],
    [Markup.button.callback('‚Ññ8', 'btn_c8'), Markup.button.callback('‚Ññ9', 'btn_c9'), Markup.button.callback('‚Ññ10', 'btn_c10'), Markup.button.callback('‚Ññ11', 'btn_c11'), Markup.button.callback('‚Ññ15', 'btn_c15'), Markup.button.callback('‚Ññ16', 'btn_c16')],
    [Markup.button.callback('‚Ññ17', 'btn_c17'), Markup.button.callback('‚Ññ18', 'btn_c18'), Markup.button.callback('‚Ññ19', 'btn_c19'), Markup.button.callback('‚Ññ20', 'btn_c20'), Markup.button.callback('‚Ññ21', 'btn_c21'), Markup.button.callback('–ö–¶', 'btn_cyberc')],
    [Markup.button.callback('–ù–∞–∑–∞–¥', 'btn_back')]
])

const buildingNames = buildings.map(building => building.name)

// Scene Generator
function campusSceneGenerate() {

    const campusScene = new BaseScene(constants.SCENE_ID_CAMPUS)

    // On enter
    campusScene.enter(async (ctx) => ctx.reply("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–º–ø—É—Å–∞", CAMPUS_KEYBOARD_MARKUP))

    // listeners
    campusScene.hears(constants.BUTTON_TEXT_CAMPUS_MAP, async (ctx) => {
        await ctx.replyWithHTML("<a href='https://www.google.com/maps/d/u/0/viewer?mid=1aEtl9jI7o0ilkZlAp02dMiw65501vcLA&ll=56.4583366050958%2C84.96033304999997&z=14'>–ü–µ—Ä–µ–π—Ç–∏ –≤ GoogleMapsüîó</a>")
    })

    campusScene.hears(constants.BUTTON_TEXT_CAMPUS_LIST, async (ctx) => {
        await ctx.reply('–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å', CAMPUS_INLINE_KEYBOARD)
    })

    // On callback query
    campusScene.action(buildingNames, async (ctx) => {
        await findLocation(ctx)
    })

    campusScene.action('btn_back', async (ctx) => {
        ctx.answerCbQuery(ctx.callback_query)
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å', CAMPUS_INLINE_KEYBOARD)
    })
    campusScene.action('btn_choice', async (ctx) => {
        ctx.answerCbQuery(ctx.callback_query)
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏ —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å', NUM_CAMPUS_KEYBOARD)
    })

    defaultAct(campusScene, constants.SCENE_ID_EDUCATION)

    return campusScene
}


async function findLocation(ctx) {
    for (let i = 0; i < buildingNames.length; i++) {
        if (ctx.callbackQuery.data === buildingNames[i]) {
            ctx.answerCbQuery(ctx.callback_query)
            await ctx.replyWithLocation(buildings[i].loc_lat, buildings[i].loc_long)
            await ctx.replyWithHTML(buildings[i].address)
        }
    }
}

module.exports = campusSceneGenerate