const {Scenes, Markup} = require('telegraf')
const constants = require("../../model/constants")
const Lesson = require("../../model/data/Lesson")
const DataBus = require("../../model/DataBus")
const Api = require("../../model/api/Api")
const buildings = require("../../model/mockdata/buildings")
const defaultAct = require("../../DefaultAct")

// let lessons = []

// –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è / –∑–∞–≤—Ç—Ä–∞ / –¥–µ–Ω—å –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const TIMETABLE_MARKUP = Markup.keyboard([
    constants.BUTTON_TEXT_TT_TODAY,
    constants.BUTTON_TEXT_TT_TOMORROW,
    constants.BUTTON_TEXT_TT_DAY,
    constants.BUTTON_TEXT_MAIN_MENU
]).resize(true)

// –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
const WEEKDAYS_MARKUP = Markup.inlineKeyboard([
    Markup.button.callback('–ü–Ω', 'btn_monday'),
    Markup.button.callback('–í—Ç', 'btn_tuesday'),
    Markup.button.callback('–°—Ä', 'btn_wednesday'),
    Markup.button.callback('–ß—Ç', 'btn_thursday'),
    Markup.button.callback('–ü—Ç', 'btn_friday'),
    Markup.button.callback('–°–±', 'btn_saturday')
])

const weekdays = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫',
    '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É']

const weekdays_btn = ['0', 'btn_monday', 'btn_tuesday',
    'btn_wednesday', 'btn_thursday', 'btn_friday', 'btn_saturday']
    
const lessonsTime = {
    // '08:30 ‚Äì 18:05': '#Ô∏è‚É£',
    '08:30 ‚Äì 10:05': '1Ô∏è‚É£',
    '10:25 ‚Äì 12:00': '2Ô∏è‚É£',
    '12:40 ‚Äì 14:15': '3Ô∏è‚É£',
    '14:35 ‚Äì 16:10': '4Ô∏è‚É£',
    '16:30 ‚Äì 18:05': '5Ô∏è‚É£',
    '18:25 ‚Äì 20:00': '6Ô∏è‚É£',
    '20:20 ‚Äì 21:55': '7Ô∏è‚É£'
}

let retrievedLessons = null

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function timetableSceneGenerate() {
    const timetableScene = new Scenes.BaseScene(constants.SCENE_ID_TIMETABLE)

    // –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
    timetableScene.enter(async (ctx) => {

        if (!DataBus.getUser({ctx: ctx})) {
            await ctx.reply('–ö–∞–∂–µ—Ç—Å—è –∫—Ç–æ-—Ç–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)')
            await ctx.scene.enter(constants.SCENE_ID_START)
        }
        
        // lessons = []
        // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        retrievedLessons = DataBus.getUserTimetable({ctx: ctx})
        // retrievedLessons = []
        if (retrievedLessons && retrievedLessons.length !== 0) {
            // for (let i = 0; i < retrievedLessons.length; i++) {
            //     let l = retrievedLessons[i]
            //     lessons.push(new Lesson(l.id, l.start, l.end, l.tip, l.place, l.event, l.disciplina, l.lichnost))
            // }
            await ctx.reply('–†–∞–∑–¥–µ–ª "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"', TIMETABLE_MARKUP)
            // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
            await sendTimetable(getNumDate(), ctx)
        } else {
            await ctx.reply('–ú–∏–Ω—É—Ç—É, —Å–µ–π—á–∞—Å –¥–æ—Å—Ç–∞–Ω—É –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) ...')

            // switch (await DataBus.retrieveUserTimetable({
            //     ctx: ctx,
            //     chat_id: ctx.chat.id,
            //     telegram_token: DataBus.getUser({ctx: ctx}).telegram_token
            // })) {
            //     case Api.STATUS_OK:
            //         ctx.scene.reenter()
            //         break
            //     default:
            //         await ctx.reply("–ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É –¢–ü–£")
            //         await ctx.scene.enter(constants.SCENE_ID_START)
            //         break
            // }
        }

        // –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ api
        DataBus.retrieveUserTimetable({
            ctx: ctx,
            chat_id: ctx.chat.id,
            telegram_token: DataBus.getUser({ctx: ctx}).telegram_token
        }).then((status) => {
            // –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω–æ, —Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
                if (status === Api.STATUS_OK) {
                    if (!retrievedLessons || retrievedLessons.length === 0) {
                        ctx.scene.reenter()
                    }
                } else {
                    // –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                    ctx.reply("–ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑")
                    ctx.scene.enter(constants.SCENE_ID_START)
                }
            }
        )


    })

    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    timetableScene.hears(constants.BUTTON_TEXT_TT_TODAY, async (ctx) => { await sendTimetable(getNumDate(), ctx)})
    timetableScene.hears(constants.BUTTON_TEXT_TT_TOMORROW, async (ctx) => sendTimetable((getNumDate() + 1) % 7, ctx))
    
    // –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    timetableScene.hears(constants.BUTTON_TEXT_TT_DAY, async (ctx) => ctx.reply('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', WEEKDAYS_MARKUP))
    
    // –≤—ã–≤–æ–¥ –ª–æ–∫–∞—Ü–∏–∏ –∫–æ—Ä–ø—É—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–∞—Ä–∞, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Å—ã–ª–∫—É
    timetableScene.hears(new RegExp('/where'), async (ctx) => {
        const lessons = DataBus.getUserTimetable({ctx})
        const lesson = lessons.find((l, i, arr) => l.where === ctx.message.text)
        console.log("Found lesson: ", lesson)
        if (!lesson) {
            await ctx.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞–∫–æ–π —ç—Ç–æ —É—Ä–æ–∫")
            return
        }
        const building = buildings.find((b, i, arr) => b.short_name === lesson.place.korpus)
        console.log("Found building: ", building)

        if (!building) {
            await ctx.reply("–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ")
            return
        }
        await ctx.replyWithHTML(building.address)
        await ctx.replyWithLocation(building.loc_lat, building.loc_long)
    })

    // –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    timetableScene.action(weekdays_btn, async (ctx) => {
        ctx.answerCbQuery()
        await sendTimetable(weekdays_btn.indexOf(ctx.callbackQuery.data), ctx)
    })

    // —Ñ—É–Ω–∫—Ü–∏—è —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–∞–º–∞ —Å—Ü–µ–Ω–∞ –∏ —Å—Ü–µ–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–∞–¥
    defaultAct(timetableScene, constants.SCENE_ID_MAIN_MENU)
    // timetableScene.on("message", async (ctx) => ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é"))
    return timetableScene
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
function getNumDate() {
    const date = new Date()
    const numDate = date.getDay()
    return numDate
}

// —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
async function sendTimetable(day, ctx) {
    // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const lessons = DataBus.getUserTimetable({ctx})
    let str = `<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${weekdays[day]}:</b>\n\n`
    // —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä –Ω–∞ –¥–µ–Ω—å
    for (let time in lessonsTime) {
        // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—ã
        str += `${lessonsTime[time]} ${time}\n`
        for (let i = 0; i < lessons.length; i++) {
            let l = lessons[i]
            // if (l.date.getDay() === day && `${l.start} ‚Äì ${l.end}` === `${time}`) {
            // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–æ –¥–Ω—é –∏ –≤—Ä–µ–º–µ–Ω–∏ 
            if (l.date.getDay() === day && parseInt(l.start.substr(0, 2), 10) <= parseInt(time.substr(0, 2), 10) && parseInt(l.end.substr(0, 2), 10) >= parseInt(time.substr(8, 2), 10) - 1) {
                // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—ã
                str += `\nüî∏ <i>${l.disciplina?.full_name}</i>\n`
                for (let j = 0; j < l.lichnost.length; j++) {
                    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                    if (l.lichnost?.[j]) str += `${l.lichnost?.[j]?.title}\n`
                }
                // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–∞—Ä—ã –∏ –æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
                if (l?.tip) str += `${l.tip}\n`
                if (l?.place) str += `–∫. ${l.place?.korpus}, –∞—É–¥. ${l.place?.nomer}\n`
                if (l?.place) str += `–ì–¥–µ —ç—Ç–æ? ${l.where}\n`
            }
        }
        str += `\n`
    }
    await ctx.replyWithHTML(str)
}

module.exports = timetableSceneGenerate


