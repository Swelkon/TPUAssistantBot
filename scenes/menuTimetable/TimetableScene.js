const {Scenes, Markup} = require('telegraf')
const constants = require("../../model/constants")
const Lesson = require("../../model/data/Lesson")
const DataBus = require("../../model/DataBus")
const Api = require("../../model/api/Api")
const buildings = require("../../model/mockdata/buildings")

let lessons = []

const TIMETABLE_MARKUP = Markup.keyboard([
    constants.BUTTON_TEXT_TT_TODAY,
    constants.BUTTON_TEXT_TT_TOMORROW,
    constants.BUTTON_TEXT_TT_DAY,
    constants.BUTTON_TEXT_MAIN_MENU
]).resize(true)

const WEEKDAYS_MARKUP = Markup.inlineKeyboard([
    Markup.button.callback('–ü–Ω', 'btn_monday'),
    Markup.button.callback('–í—Ç', 'btn_tuesday'),
    Markup.button.callback('–°—Ä', 'btn_wednesday'),
    Markup.button.callback('–ß—Ç', 'btn_thursday'),
    Markup.button.callback('–ü—Ç', 'btn_friday'),
    Markup.button.callback('–°–±', 'btn_saturday')
])

const weekdays = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫',
    '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É']
const weekdays_btn = ['0', 'btn_monday', 'btn_tuesday',
    'btn_wednesday', 'btn_thursday', 'btn_friday', 'btn_saturday']
const lessonsTime = {
    // '08:30 ‚Äì 18:05': '#Ô∏è‚É£',
    '08:30 ‚Äì 10:05': '1Ô∏è‚É£',
    '10:25 ‚Äì 12:00': '2Ô∏è‚É£',
    '12:40 ‚Äì 14:15': '3Ô∏è‚É£',
    '14:35 ‚Äì 16:10': '4Ô∏è‚É£',
    '16:30 ‚Äì 18:05': '5Ô∏è‚É£',
    '18:25 ‚Äì 20:00': '6Ô∏è‚É£',
    '20:20 ‚Äì 21:55': '7Ô∏è‚É£'
}

let date = new Date() // date example
let numDate = date.getDay()
let retrievedLessons = null

function timetableSceneGenerate() {
    const timetableScene = new Scenes.BaseScene(constants.SCENE_ID_TIMETABLE)

    timetableScene.enter(async (ctx) => {
        date = new Date() // date example
        numDate = date.getDay()

        switch (await DataBus.retrieveUserTimetable({
            ctx: ctx,
            chat_id: ctx.chat.id,
            telegram_token: ctx.session.user.telegram_token
        })) {
            case Api.STATUS_OK:
                lessons = []
                retrievedLessons = DataBus.getUserTimetable({ctx: ctx})
                if (retrievedLessons && retrievedLessons.length !== 0) {
                    for (let i = 0; i < retrievedLessons.length; i++) {
                        let l = retrievedLessons[i]
                        lessons.push(new Lesson(l.id, l.start, l.end, l.tip, l.place, l.event, l.disciplina, l.lichnost))
                    }
                    await ctx.reply('–†–∞–∑–¥–µ–ª "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"', TIMETABLE_MARKUP)
                    await sendTimetable(numDate, ctx)
                } else {
                    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏')
                    ctx.scene.enter(constants.SCENE_ID_MAIN_MENU)
                }
                break
            default:
                await ctx.reply("–ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É –¢–ü–£")
                await ctx.scene.enter(constants.SCENE_ID_START)
                break

        }

    })

    timetableScene.hears(constants.BUTTON_TEXT_TT_TODAY, async (ctx) => sendTimetable(numDate, ctx))
    timetableScene.hears(constants.BUTTON_TEXT_TT_TOMORROW, async (ctx) => sendTimetable((numDate + 1) % 7, ctx))
    timetableScene.hears(constants.BUTTON_TEXT_TT_DAY, async (ctx) => ctx.reply('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', WEEKDAYS_MARKUP))
    timetableScene.hears(constants.BUTTON_TEXT_MAIN_MENU, async (ctx) => ctx.scene.enter(constants.SCENE_ID_MAIN_MENU))
    timetableScene.hears(new RegExp('/where'), async (ctx) => {
        const lesson = lessons.find((l, i, arr) => l.where === ctx.message.text)
        console.log("Found lesson: ", lesson)
        if (!lesson) {
            await ctx.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞–∫–æ–π —ç—Ç–æ —É—Ä–æ–∫")
            return
        }
        const building = buildings.find((b, i, arr) => b.short_name === lesson.place.korpus)
        console.log("Found building: ", building)

        if (!building) {
            await ctx.reply("–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ")
            return
        }
        await ctx.replyWithHTML(building.address)
        await ctx.replyWithLocation(building.loc_lat, building.loc_long)

    })

    timetableScene.on("message", async (ctx) => ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é"))

    timetableScene.action(weekdays_btn, async (ctx) => {
        ctx.answerCbQuery()
        await sendTimetable(weekdays_btn.indexOf(ctx.callbackQuery.data), ctx)
    })

    return timetableScene
}

async function sendTimetable(day, ctx) {
    let str = `<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${weekdays[day]}:</b>\n\n`
    for (let time in lessonsTime) {
        str += `${lessonsTime[time]} ${time}\n`
        for (let i = 0; i < lessons.length; i++) {
            let l = lessons[i]
            // if (l.date.getDay() === day && `${l.start} ‚Äì ${l.end}` === `${time}`) {
            if (l.date.getDay() === day && parseInt(l.start.substr(0, 2), 10) <= parseInt(time.substr(0, 2), 10) && parseInt(l.end.substr(0, 2), 10) >= parseInt(time.substr(8, 2), 10) - 1) {
                str += `\nüî∏ <i>${l.disciplina?.full_name}</i>\n`
                for (let j = 0; j < l.lichnost.length; j++) {
                    if (l.lichnost?.[j]) str += `${l.lichnost?.[j]?.title}\n`
                }
                str += `${l.tip}\n`
                if (l?.place) str += `–∫. ${l.place?.korpus}, –∞—É–¥. ${l.place?.nomer}\n`
                if (l?.place) str += `–ì–¥–µ —ç—Ç–æ? ${l.where}\n`
            }
        }
        str += `\n`
    }
    await ctx.replyWithHTML(str)
}

module.exports = timetableSceneGenerate


